name: KernelSU Builder

on:
  push:
  workflow_dispatch:
  repository_dispatch:
    types: [trigger-KernelSU-build]

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: ["LineageOS-21.0"]

    env:
      VERSION: ${{ matrix.version }}
      ARCH: arm64
      KBUILD_BUILD_HOST: Github-Action
      KBUILD_BUILD_USER: "KernelSU_Builder"
      CLANG_PATH: ${{ github.workspace }}/kernel/clang/bin

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install build dependencies
        run: pip install pyyaml
          set -e
          sudo apt update
          sudo apt install  python3-pip jq libarchive-tools zip lib32z-dev libghc-bzlib-dev pngcrush liblzma python-is-python3 libsdl1.2-dev autoconf libxml2-utils wget pkg-config unzip w3m git kmod bc build-essential gcc libc6 curl libstdc++6 libssl-dev cpio p7zip-full ccache lld binutils clang llvm zip flex bison gawk libiberty-dev
          sudo pip3 install yq

      - name: Set up ccache
        run: |
          echo "/usr/lib/ccache" >> $GITHUB_PATH
          echo "USE_CCACHE=1" >> $GITHUB_ENV

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: ~/.ccache
          key: ${{ runner.os }}-ccache-${{ matrix.version }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-ccache-${{ matrix.version }}-

      - name: Clone clang and kernel sources
        run: |
          set -e
          ./clone.sh

      - name: Add Clang to PATH
        run: echo "${CLANG_PATH}" >> $GITHUB_PATH

      - name: Compile kernel (no KernelSU)
        run: |
          set -e
          ./build.sh

      - name: Make output directories for kernel
        run: |
          mkdir -p outw/false outw/true

      - name: Move kernel without KernelSU support to output directory
        run: |
          set -e
          ./move.sh

      - name: Clean build environment
        run: |
          set -e
          ./clean.sh

      - name: Set KERNELSU environment variable to true
        run: echo "KERNELSU=true" >> $GITHUB_ENV

      - name: Set KERNELSU_VERSION environment variable
        run: |
          if [[ ! -f ksu_version.txt ]]; then
            echo "Error: ksu_version.txt not found!"
            exit 1
          fi
          echo "KERNELSU_VERSION=$(cat ksu_version.txt)" >> $GITHUB_ENV

      - name: Add KernelSU support to kernel
        run: |
          set -e
          ./kernelSU.sh

      - name: Compile kernel with KernelSU support
        run: |
          set -e
          ./build.sh

      - name: Move kernel with KernelSU support to output directory
        run: |
          set -e
          ./move.sh

      - name: Clone AnyKernel3
        run: |
          set -e
          ./anykernel.sh

      - name: Set ZIP_NO_KSU and ZIP_KSU environment variables
        run: |
          echo "ZIP_NO_KSU=${{ env.VERSION }}-NoKernelSU.zip" >> $GITHUB_ENV
          echo "ZIP_KSU=${{ env.VERSION }}-KernelSU-$(cat ksu_version.txt).zip" >> $GITHUB_ENV

      - name: Make AnyKernel3 zip
        run: |
          set -e
          ./makezip.sh

      - name: Extract info for release
        run: |
          set -e
          ./extract.sh

      - name: Make a release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ github.workspace }}/${{ env.ZIP_NO_KSU }}
            ${{ github.workspace }}/${{ env.ZIP_KSU }}
          token: ${{ secrets.GITHUB_TOKEN }}
          name: KernelSU Release - ${{ env.KERNELSU_VERSION }}
          tag_name: ${{ github.run_id }}
          body: |
            **Info:**
              - KernelSU Version: ${{ env.KERNELSU_VERSION }}.

            **Installation:**
              - Download desired zip file.
              - Flash the zip file in recovery using sideload or any other method.

            <details>
              <summary>Build Settings</summary>
                ```
                ${{ env.buildsettings }}
                ```
            </details>
          draft: false
          prerelease: false
